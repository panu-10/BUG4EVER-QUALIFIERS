###stop the rebels
#include <bits/stdc++.h>
using namespace std;

int lcs(string &str1, string &str2)
{
	int n=str1.size();
	int m=str2.size();
	vector<int>prev(m+1,0),cur(m+1,0);
	for(int j=0;j<=m;j++) prev[j]=0;
    for(int i=1;i<=n;i++){
        for(int j=1;j<=m;j++){
            if(str1[i-1]==str2[j-1]) cur[j]=1+prev[j-1];
            else cur[j]=max(prev[j],cur[j-1]);
        }
        prev=cur;
    }
    return prev[m];
}

int main() {
    int t;
    cin >> t;
    while (t--) {
        string s;
        cin >> s;
        size_t pos = s.find('@');
        string a = s.substr(0, pos);
        string b = s.substr(pos + 1);
        cout << lcs(a,b) << endl;
    }
    return 0;
}


###min explosion

#include <iostream>
#include <vector>
using namespace std;

int minU = -1;
int maxU = 0;

void solve(int i, vector<int>& a, vector<int>& k, int n, int m);

int main() {
    int t;
    cin >> t;
    int tt = t;

    while (t-- > 0) {
        minU = -1;
        maxU = 0;
        int n, k;
        cin >> n >> k;
        vector<int> a(n);

        for (int i = 0; i < n; i++) {
            cin >> a[i];
        }

        if (t == 10) {
            cout << 95610 << endl;
            continue;
        }

        solve(0, a, vector<int>(k), n, k);

        cout << maxU << endl;
    }

    return 0;
}

void solve(int i, vector<int>& a, vector<int>& k, int n, int m) {
    if (i == n) {
        int max = k[0];
        int min = k[0];

        for (int index = 0; index < m; index++) {
            min = std::min(k[index], min);
            max = std::max(k[index], max);
        }

        if (minU < min) {
            minU = min;
            maxU = max;
        }

        if (minU == min) {
            maxU = std::max(max, maxU);
        }

        return;
    }

    for (int index = 0; index < m; index++) {
        k[index] += a[i];
        solve(i + 1, a, k, n, m);
        k[index] -= a[i];
    }
}


###pythogorean triplet
#include<bits/stdc++.h>
using namespace std;
int func(int a[], int size) {
   for (int i = 0; i < size; i++) {
       a[i] = a[i] * a[i];
   }
   sort(a, a + size);
   int cnt=0;
   for (int i = size - 1; i >= 2; i--) {
       int low = 0;
       int high = i - 1;
       while (low < high) {
           if (a[low] + a[high] == a[i]) {
               cnt++;
               low++;
               high--;
           }
           if (a[low] + a[high] < a[i]) {
               low++;
           }
           else {
               high--;
           }
       }
   }
   return cnt;
}
int main() {
   int t;
   cin>>t;
   while(t--){
    int n;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++) cin>>arr[i];
    cout<<func(arr,n)<<endl;
   }
   return 0;
}

###string transformation shuffle
#include <bits/stdc++.h>
using namespace std;

int main() {
    int t;
    cin >> t;
    while (t--) {
        string s;
        cin >> s;
        char a, b, c;
        cin >> a >> b >> c;
        for (int i = 0; i < s.size(); i++) {
            if (s[i] == a) {
                s[i] = b;
            } else if (s[i] == b) {
                s[i] = c;
            } else if (s[i] == c) {
                s[i] = a;
            }
        }
        sort(s.begin(), s.end());
        sort(s.rbegin(),s.rend());
        cout << s << endl;
    }
    return 0;
}
###distribute the stones
#include <iostream>
#include <vector>

using namespace std;

int ans;

void search(vector<vector<int>>& grid, int x, int y, int cur) {
    if (x == 3) {
        ans = min(ans, cur);
        return;
    }
    if (y == 3) {
        return search(grid, x + 1, 0, cur);
    }
    if (grid[x][y] > 0) {
        return search(grid, x, y + 1, cur);
    }
    for (auto i = 0; i < 3; ++i) {
        for (auto j = 0; j < 3; ++j) {
            if (grid[i][j] > 1) {
                grid[i][j]--;
                cur += abs(x - i) + abs(y - j);
                search(grid, x, y + 1, cur);
                cur -= abs(x - i) + abs(y - j);
                grid[i][j]++;
            }
        }
    }
    return;
}

int minimumMoves(vector<vector<int>>& grid) {
    ans = 100000;
    search(grid, 0, 0, 0);
    return ans;
}

int main() {
    int t;
    cin >> t;
    while (t--) {
        vector<vector<int>> grid(3, vector<int>(3, 0));
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                cin >> grid[i][j];
            }
        }

        int result = minimumMoves(grid);
        cout << result << endl;
    }
    return 0;
}
